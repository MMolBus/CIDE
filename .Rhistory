file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"),
overwrite=T)
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_"))
lapply(seq_along(list_threshold_results[[1]]), function(i)
writeRaster(list_threshold_results[[1]][[i]],
file.path(
new_dir,
paste(index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")),
overwrite=T)
)
list_raster_results
stack(calibration_results
list_raster_results[[i]],
list_threshold_results[[1]][[i]]
)
stack(calibration_results,
list_raster_results[[i]],
list_threshold_results[[1]][[i]]
)
stack(calibration_results,
list_raster_results[[i]],
list_threshold_results[[1]][[i]]
)
calibration_results
calibration_results[[i]]
calibration_results[[1]]
calibration_results[[1]]
calibration_results[[1]]
calibration_results[[1]]
calibration_results[[1]]
calibration_results[[1]]
stack(calibration_results[[1]],
list_raster_results[[i]],
list_threshold_results[[1]][[i]]
)
calibration_results[[1]]
raster_export <-
stack(calibration_results[[1]],
list_raster_results[[i]],
list_threshold_results[[1]][[i]])
list_threshold_results[[1]][[i]]
index.[i]
raster_export <-
stack(calibration_results[[1]],
list_raster_results[[i]],
list_threshold_results[[1]][[i]])
names(raster_export) <- c("Orange", "Cyan", "NIR", index.[i], "binary")
raster_export
plot(raster_export)
writeRaster(raster_export,
file.path(
new_dir,
paste("raster",index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")),
overwrite=T)
saveRDS(raster_export,
file.path(
new_dir,
paste("raster",index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")),
overwrite=T)
saveRDS(raster_export,
file.path(
new_dir,
paste("raster",index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")))
saveRDS(raster_export,
file.path(
new_dir,
paste("raster",index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".tif"),
sep="_")))
saveRDS(raster_export,
file.path(
new_dir,
paste("raster",index.[i],threshold.method,threshold.vector[i],
paste0(sample_name,".rds"),
sep="_")))
calculate.thresh
setwd("..")
getwd()
# Extract mask values -----------------------------------------------------
#extract mask pixel coordinates
if(manual.mask.test==T){
# Set data frame list with cell coordinates(x,y) index values(z)
# mask threshold (surface) and mask manual(surface)
# Additionnaly we compare manual segmentation and threshold segmentation
# We create new surface classes (as new cols in the data frame )
# by crossing the two classification as follows:
# True.Negative => baseline background classified as background.
# False.Positive => baseline background classified as moss.
# False.Negative => baseline moss classified as background.
# True.Positive => baseline moss classified as moss.
coor <-
coordinates(calibration_results[[1]])
failed_thresholds <-
lapply(1:2, function(i)
list_threshold_results[[i]][is.na(list_threshold_results[[2]])==T])
failed_threshold_names <-
gsub("_thresh_mask","",names(failed_thresholds[[1]]))
succesfull_thresholds <-
lapply(1:2, function(i)
list_threshold_results[[i]][is.na(list_threshold_results[[2]])!=T])
succesfull_threshold_names <-
gsub("_thresh_mask","",names(succesfull_thresholds[[1]]))
surface_class <-
lapply(grep(paste(succesfull_threshold_names, collapse = "|"), index.),
function(i)
paste0(as.integer(values(calibration_results[[2]][[4]])),
as.integer(values(list_threshold_results[[1]][[i]]))
)
)
class_label <- c( "00",     "10",     "01",     "11" )
if(require(varhandle)!=T){
install.packages("varhandle")
require(varhandle)}
binary_surfaces <-
lapply(1:length(surface_class),
function(i)
varhandle::to.dummy(surface_class[[i]], "surface")
)
names(binary_surfaces) <-
succesfull_threshold_names
failed_binary_surfaces <-
matrix(as.numeric(rep(NA,4*ncell(list_raster_results[[1]]))),
nrow =ncell(list_raster_results[[1]]),
ncol = 4)
failed_binary_surfaces <-
lapply(1:length(failed_threshold_names), function(i) failed_binary_surfaces)
names(failed_binary_surfaces) <-
failed_threshold_names
binary_surfaces <-
c(binary_surfaces, failed_binary_surfaces)
binary_surfaces <- binary_surfaces[match(index., names(binary_surfaces))]
# Correct if are less than 4 classes when we cross baseline mask and calculated mask
for(i in c(1:length(binary_surfaces))[index. %in% succesfull_threshold_names]){
if(ncol(binary_surfaces[[i]])!=4){
cols <- c("surface.00", "surface.10", "surface.01", "surface.11")
missing_colnames <- cols[is.element(cols, colnames(binary_surfaces[[i]]))!=T]
missing_cols <-
matrix(0, ncell(list_threshold_results[[1]][[1]]),
ncol = length(missing_colnames))
colnames(missing_cols) <- missing_colnames
binary_surfaces[[i]] <-
cbind(binary_surfaces[[i]],missing_cols)
binary_surfaces[[i]] <-
binary_surfaces[[i]][,match(cols, colnames(binary_surfaces[[i]]))]
}else{
binary_surfaces[[i]] <- binary_surfaces[[i]]
}
}
list_df_results <-
lapply(
# grep(paste(succesfull_threshold_names, collapse = "|"), index.),
1:length(binary_surfaces),
function(i)
cbind(
coor,
getValues(list_raster_results[[i]]),
as.integer(values(list_threshold_results[[1]][[i]])),
getValues(calibration_results[[2]][[4]]),
binary_surfaces[[i]][,1],
binary_surfaces[[i]][,2],
binary_surfaces[[i]][,3],
binary_surfaces[[i]][,4]
)
)
# transform in data frame
list_df_results <-
lapply(c(1:length(list_raster_results)), function(i)
as.data.frame(list_df_results[[i]]))
# Set colnames
colnames <- c("x", "y", "index_value", "predict.surface.class", "baseline.surface.class",
"True.Negative","False.Positive", "False.Negative",
"True.Positive")
list_df_results <- lapply(list_df_results, setNames, colnames)
rm(colnames, surface_class, binary_surfaces)
}else{
coor <- coordinates(calibration_results[[1]])
# Set df list with cell coordinates(x,y) indexvalues(z)  and
# mask threshold values (surface)
list_df_results <-
lapply(c(1:length(list_raster_results)),
function(i)
cbind(
coor,
getValues(list_raster_results[[i]]),
getValues(list_threshold_results[[1]][[i]])
)
)
# transform in data frame
list_df_results <-
lapply(c(1:length(list_raster_results)), function(i)
as.data.frame(list_df_results[[i]]))
# Set colnames
colnames <- c("x", "y", "index_value", "surface_threshold")
list_df_results <- lapply(list_df_results, setNames, colnames)
names(list_df_results) <- names(list_raster_results)
rm(colnames)
}
if(pdf == FALSE){
rm(list_raster_results)
list.results<- list(list_df_results)
names(list.results) <- c("data.frames")
}else{
# List raster results an df results
list.results <- list(list_df_results, list_raster_results)
names(list.results) <- c("data.frames", "rasters")}
descrip==F
descrip=T
descriptors.
# rm(calibration_results)
############################################################################
# Descriptors calculation -------------------------------------------------
############################################################################
if(descrip==F){
if(manual.mask.test==F){
if(length(index.)>1){
int_surf_cover <-
unname(do.call(c,
lapply(c(1:length(index.)),
function(i)
unname(
c(
table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1]
)
)
)
))
}else{
int_surf_cover <-
unlist(
lapply(c(1:length(index.)),
function(i)
unname(
c(
table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1]
)
)
)
)
}
}else{
if(length(index.)>1){
int_surf_cover <-
unname(do.call(c,
lapply(c(1:length(index.)),
function(i)
unname(
c(
table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1],
# table(list.results[[1]][[i]][,5])[1], table(list.results[[1]][[i]][,5])[2],
length(c(list.results[[1]][[i]][,5])[c(list.results[[1]][[i]][,5])==0]),
length(c(list.results[[1]][[i]][,5])[c(list.results[[1]][[i]][,5])==1]),
# table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1],
# table(list.results[[1]][[i]][,5])[2], table(list.results[[1]][[i]][,5])[1],
table(list.results[[1]][[i]][,6])[2],
# table(list.results[[1]][[i]][,6])[1],
table(list.results[[1]][[i]][,7])[2],
# table(list.results[[1]][[i]][,7])[1],
table(list.results[[1]][[i]][,8])[2],
# table(list.results[[1]][[i]][,8])[1],
table(list.results[[1]][[i]][,9])[2]
# table(list.results[[1]][[i]][,9])[1]
)
)
)
))
}else{
int_surf_cover <-
unlist(
lapply(c(1:length(index.)),
function(i)
unname(
c(
table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1],
# table(list.results[[1]][[i]][,5])[2], table(list.results[[1]][[i]][,5])[1],
length(c(list.results[[1]][[i]][,5])[c(list.results[[1]][[i]][,5])==0]),
length(c(list.results[[1]][[i]][,5])[c(list.results[[1]][[i]][,5])==1]),
# table(list.results[[1]][[i]][,4])[2], table(list.results[[1]][[i]][,4])[1],
# table(list.results[[1]][[i]][,5])[2], table(list.results[[1]][[i]][,5])[1],
table(list.results[[1]][[i]][,6])[2],
# table(list.results[[1]][[i]][,6])[1],
table(list.results[[1]][[i]][,7])[2],
# table(list.results[[1]][[i]][,7])[1],
table(list.results[[1]][[i]][,8])[2],
# table(list.results[[1]][[i]][,8])[1],
table(list.results[[1]][[i]][,9])[2]
# table(list.results[[1]][[i]][,9])[1]
)
)
)
)
}
}
}else{#descrip==T
# source("./ccspectral/Descriptor.calculation.fun.R")
if(manual.mask.test==F){
if(length(index.)>1){
int_surf_cover <-
unname(do.call(c,
lapply(c(1:length(index.)),
function(i)
do.call(c,
lapply( 0:1 , function(j)
descriptor.fun(
list.results[[1]][[i]][,3][list.results[[1]][[i]][,4] == j],
descriptors.)
)
)
)
))
}else{
int_surf_cover <-
unlist(
lapply(c(1:length(index.)),
function(i)
do.call(c,
lapply( 0:1 , function(j)
descriptor.fun(
list.results[[1]][[i]][,3][list.results[[1]][[i]][,4] == j],
descriptors.)
)
)
)
)
}
}else{#manual.mask.test==T
int_surf_cover <-
lapply(c(1:length(index.)),
function(i)
unlist(
lapply(4:5 , function(j)
unlist(
lapply(0:1, function(k)
descriptor.fun(
list.results[[1]][[i]][,3][list.results[[1]][[i]][,j] == k],
descriptors.)
)
)
)
)
)
test_mask_surfaces <-
lapply(c(1:length(index.)),
function(i)
unlist(
lapply(6:9 , function(j)
descriptor.fun(
list.results[[1]][[i]][,3][list.results[[1]][[i]][,j] == 1],
descriptors.)
)
)
)
int_surf_cover <-
unlist(
lapply(c(1:length(index.)),
function(i)
c(int_surf_cover[[i]], test_mask_surfaces[[i]]
)
)
)
rm(test_mask_surfaces)
}
}
int_surf_cover[is.na(int_surf_cover)] <- 0
dat <- read.csv(summary.file)
dat
# names(descriptor_value) <- colnames(dat)[-c(1:7)]
#
if(calculate.thresh==T){
if(length(index.)>1){
theresholds.results <-  unname(do.call(c,list_threshold_results[[2]]))
}else{
theresholds.results <-  unlist(list_threshold_results[[2]])
}
new_dat <-
as.data.frame(
as.list(
c(
sample_name,
img_photo,
# nir_photo,
int_surf_cover,
theresholds.results,
threshold.method
)
)
)
}else{
new_dat <-
as.data.frame(
as.list(
c(
sample_name,
img_photo,
# nir_photo,
int_surf_cover,
threshold.vector,
"Predefined"
)
)
)
}
colnames(new_dat) <- colnames(dat)
dat_bind <- rbind(dat, new_dat)
write.csv(dat_bind, summary.file, row.names = F)
xrite_grey <- c(96.539, 81.257, 66.766, 50.867, 35.656, 20.461)
xrite_grey_ran <- max(xrite_grey)-min(xrite_grey)
xrite_grey_prop <- xrite_grey-min(xrite_grey)
xrite_grey_perc <- (xrite_grey_prop/max(xrite_grey_prop))*100
mapir_grey <-  c(83, 27, 21, 2)
mapir_grey_ran <- max(mapir_grey)-min(mapir_grey)
mapir_grey_prop <- mapir_grey-min(mapir_grey)
mapir_grey_perc <- (mapir_grey_prop/max(mapir_grey_prop))*100
xrite_grey_perc
mapir_grey_perc
255/6
83/255
