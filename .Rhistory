"threshold.method")
}
}else{
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}
}else{#if you don't want to calculate autothresholds, use a threshold vector value,
if(manual.mask.test==F){
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse=".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}else{
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}
}
}else{
if(calculate.thresh==T){#if you want to calculate autothresholds
if(manual.mask.test==F){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")}
}else{#if you don't want to calculate autothresholds, use a threshold vector value,
if(manual.mask.test==F){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file", "real.moss.cover",
c("sample", "img.file", "real.moss.cover",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")}
}
}
df <- data.frame(matrix(ncol = length(df_names), nrow = 0))
colnames(df) <- df_names
# set df col class
col_class <-
c(rep("character", 3), rep("numeric", length(df_names) - 4),"character")
for (i in c(1:length(col_class))) {
class(df[, i]) <- col_class[i]
}
rm(col_class)
# Create results csv-----------------------------------------------------
if(calculate.thresh == TRUE){
summary_file <- paste0(out_dir,  paste0("/",threshold.method,"_","summary_data.csv"))
if(!file.exists(summary_file)){write.csv(df, summary_file, row.names = F)}
} else{
summary_file <- paste0(out_dir,  paste0("/summary_data.csv"))
if(!file.exists(summary_file)){write.csv(df, summary_file, row.names = F)}
}
# vis_files <- list.files(path = "./vis")
img_files <- list.files(path = "./JPG")
# nir_files <- list.files(path = "./nir")
if(manual.mask.test==T){
mask_files <- list.files(path = "./mask", pattern = ".tif$")}
# Check if a matching error exists between lists --------------------------
# if (length(vis_files) != length(nir_files)) {
#   stop("Different number of VIS and NIR photos")
# }
# Samples per picture
# indetermined obs areas for picture
total_samples <- length(obs.areas)
# Set sample names #############################################################################
# extract cell names
# cell_names <-
#       gsub(".*/", "",
#            list.files(path = "./rois",pattern=".roi$",full.names = F, recursive = T))
cell_names <-
gsub(".*/", "",
list.files(path = "./rois",pattern=".tif$",full.names = F, recursive = T))
# we have the .roi files in picture named folders in the "rois" directory
samples.per.pic <-
unlist(
lapply(1:(length(list.dirs("rois"))-1),
function(i) length(list.files(list.dirs("rois")[i+1]))))
all_named       <-
data.frame(photo = unlist(lapply(1:length(img_files),
function(i) rep(img_files[i], each=samples.per.pic[i]))),
cell = cell_names)
if (file.exists("names.csv")) {
sample_names <- c(as.character(read.csv("names.csv")[, 1]))
if (length(sample_names) != total_samples) {
stop("File of sample names contains less/more names than samples")
}
all_named$sample <- sample_names
} else{
all_named$sample <- c(names = paste0("obs_", 1:(total_samples)))
}
print(all_named)
all <-
data.frame(Var1 = 1:length(all_named[,1]), Var2 = 1:length(obs.areas)) %>%
dplyr::arrange(Var1)
print(all)
start_time <- Sys.time()
message(paste("Starting calculations at", start_time))
# CALCS function, for ccspectral
img.files = all_named[,1]
# nir.files = all_named[,1]
manual.mask.test = manual.mask.test
mask.files = mask_files
summary.file = summary_file
total.samples = total_samples
index.= index.
descriptors.= descriptors.
calculate.thresh = calculate.thresh
threshold.method = threshold.method
area <- 1
photo <- 1
out.dir <- out_dir
# Prepare data
obs_area   <- obs.areas[[area]]
img_photo  <- img.files[photo]
# nir_photo  <- nir.files[photo]
if (manual.mask.test == T) {
mask_photo <- mask.files[photo]
}
done_samples <-
nrow(data.table::fread(summary.file, select = 1L, header = T))
if (file.exists("names.csv")) {
sample_names <- c(as.character(read.csv("names.csv")[, 1]))
if (length(sample_names) != total.samples)
{
stop ("File of sample names contains less/more names than samples")
}
} else{
sample_names <- c(names = paste0("obs_", 1:(total.samples)))
}
sample_name <- sample_names[photo]
print(paste("img picture name: ", as.character(img_photo)))
# print(paste("nir picture name: ", as.character(nir_photo)))
# print(paste("Roi to sample correspondance:", paste0(cell_names[area], " = ", sample_name)))
if (manual.mask.test == T) {
print(paste("Baseline file", mask_photo))
}
if (manual.mask.test == T) {
all_bands <-
raster.jpg.ccspectral(
img.photo = img_photo,
# nir.photo = nir_photo,
manual.mask.test = manual.mask.test,
mask.photo = mask_photo
)
} else{
all_bands <-
raster.jpg.ccspectral(
img.photo = img_photo,
# nir.photo = nir_photo,
manual.mask.test = manual.mask.test)
}
calibration_results <-
cell.extract.color.cal.fun(
obs.area = obs_area,
all.bands = all_bands,
chart = chart,
manual.mask.test = manual.mask.test,
pdf = pdf
)
if (pdf == T && manual.mask.test == T) {
moss_poly <- calibration_results[7]
}
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
list_raster_results
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
# Calculate thershold results
if(index.correction == T){
lapply(seqalong(list_raster_results), function(k)
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction)
}
# Calculate thershold results
if(index.correction == T){
lapply(seq_along(list_raster_results), function(k)
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction)
}
plot(list_raster_results[[1]])
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
# Calculate thershold results
if(index.correction == T){
lapply(seq_along(list_raster_results), function(k)
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction)
}
index.correction
index.correction.value
# Calculate thershold results
if(index.correction == T){
lapply(seq_along(list_raster_results), function(k)
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value)
}
plot(list_raster_results[[1]])
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
list_raster_results
seq_along(list_raster_results)
index.correction == T
seq_along(list_raster_results)
list_raster_results[[k]]
k <- 1
list_raster_results[[k]]
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
# Calculate thershold results
if(index.correction == T){
for(k in seq_along(list_raster_results)){
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value
}
# lapply(seq_along(list_raster_results), function(k)
}
# Calculate thershold results
if(index.correction == T){
for(k in seq_along(list_raster_results)){
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value[k]
}
# lapply(seq_along(list_raster_results), function(k)
}
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
plot(list_raster_results[[1]])
# Calculate thershold results
if(index.correction == T){
for(k in seq_along(list_raster_results)){
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value[k]
}
# lapply(seq_along(list_raster_results), function(k)
}
plot(list_raster_results[[1]])
ccspectral.df(tif.path = wd,
chart,
obs.areas,
pdf = F,
calculate.thresh = F,
descrip = T,
manual.mask.test = F,
index. = c("NDVI"),
threshold.method = NULL,
threshold.vector = 0.4,
index.correction = T,
index.correction.value = ndvi_correction,
descriptors. =
c("median","mean","sd","min",
"max","diff.range" )
)
gitwd
setwd(gitwd)
devtools::load_all()
setwd(wd)
ccspectral.df(tif.path = wd,
chart,
obs.areas,
pdf = F,
calculate.thresh = F,
descrip = T,
manual.mask.test = F,
index. = c("NDVI"),
threshold.method = NULL,
threshold.vector = 0.4,
index.correction = T,
index.correction.value = ndvi_correction,
descriptors. =
c("median","mean","sd","min",
"max","diff.range" )
)
files <-
list.files("./results/output 2023-05-08 20.25.49.609912 manual/raster_results", full.names = T)
sp::plot(readRDS(files[1])[["NDVI"]])
sp::plot(readRDS(files[2])[["NDVI"]])
sp::plot(readRDS(files[3])[["NDVI"]])
sp::plot(readRDS(files[4])[["NDVI"]])
sp::plot(readRDS(files[5])[["NDVI"]])
sp::plot(readRDS(files[6])[["NDVI"]])
sp::plot(readRDS(files[7])[["NDVI"]])
# check new values
files <-
list.files("./results/output 2023-05-08 20.40.22.696108 manual/raster_results", full.names = T)
sp::plot(readRDS(files[1])[["NDVI"]])
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
list_raster_results
# correct index if required
if(index.correction == T){
for(k in seq_along(list_raster_results)){
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value[k]
}
# lapply(seq_along(list_raster_results), function(k)
}
list_raster_results
# check new values
files <-
list.files("./results/output 2023-05-08 20.40.22.696108 manual/raster_results", full.names = T)
sp::plot(readRDS(files[1])[["NDVI"]])
calcs()
calcs()
calcs
list_raster_results <-
index.calc.fun(raster.mat  = calibration_results[[1]],
raster.band = calibration_results[[2]],
index. = index.)
# correct index if required
if (index.correction == T) {
for (k in seq_along(list_raster_results)) {
list_raster_results[[k]] <-
list_raster_results[[k]] + index.correction.value[k]
}
}
list_raster_results
setwd(gitwd)
devtools::load_all()
setwd(wd)
ccspectral.df(tif.path = wd,
chart,
obs.areas,
pdf = F,
calculate.thresh = F,
descrip = T,
manual.mask.test = F,
index. = c("NDVI"),
threshold.method = NULL,
threshold.vector = 0.4,
index.correction = T,
index.correction.value = ndvi_correction,
descriptors. =
c("median","mean","sd","min",
"max","diff.range" )
)
# check new values
files <-
list.files("./results/output 2023-05-08 20.46.20.150139 manual/raster_results", full.names = T)
sp::plot(readRDS(files[1])[["NDVI"]])
# check new values
files <-
list.files("./results/output 2023-05-08 20.46.20.150139 manual/raster_results", full.names = T)
files
sp::plot(readRDS(files[1])[["NDVI"]])
save.image("~/Trabajo técnico/CIDE/testing_CIDE/data/20230508.rdata.RData")
