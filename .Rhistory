pdf = F,
calculate.thresh = F,
descrip = T,
manual.mask.test = F,
index. = c("NDVI"),
threshold.method = NULL,
threshold.vector = 0.4,
descriptors. =
c("median","mean","sd","min",
"max","diff.range" )
)
# if(manual.mask.test==T){
#   if(any(list.files(getwd()) %in% "nir") &
#    any(list.files(getwd()) %in% "vis") &
#    any(list.files(getwd()) %in% "mask")) {
# }else{
#   wd <- getwd()
#   setwd(tif.path)
#   on.exit(setwd(wd))
# }
#   }else{
if(any(list.files(getwd()) %in% "JPG") &
any(list.files(getwd()) %in% "rois")) {
}else{
wd <- getwd()
setwd(tif.path)
on.exit(setwd(wd))}
if(calculate.thresh==T){
surface. = c("predict.moss", "predict.backgr")
if(any(threshold.method==c("Huang", "IJDefault",
"IsoData", "Li",
"Mean", "MinErrorI",
"Moments", "Otsu",
"Percentile", "RenyiEntropy",
"Shanbhag", "Triangle"))==F){
stop("if you want to calculate auto threshold value
you need to define a valid threshold.method argument.")}
}else{
if(exists("threshold.vector")==F){
stop("if you don't want to calculate autothreshold values you
need to define a threshold.vector values for the selected index.")
}else{
if(length(index.)!=length(threshold.vector)){
stop("thershold.vector must have the same length as the
index. argument")}
threshold.method <- "manual"
}
surface. = c("predict.moss", "predict.backgr")
}
if(manual.mask.test==T){
surface. <- c(surface.,"baseline.moss", "baseline.backgr", "True.Negative","False.Positive", "False.Negative",
"True.Positive")
}
surface_order <- c("predict.moss",   "predict.backgr", "baseline.moss", "baseline.backgr")
surface. <- surface.[order(match(surface., surface_order))]
index_order <- c("NDVI", "SR", "MSAVI", "EVI", "CI", "BSCI", "BI",
"NORR", "NORG", "NORB", "EXR", "EXG", "EXB", "EXGR",
"CIVE", "VEG", "HUE", "SAT", "VAL")
index. <- index.[order(match(index., index_order))]
descriptors_order <- c("median", "mean", "sd", "min",
"max", "diff.range"
# "threshold",
# "n.cell"
)
descriptors. <- descriptors.[order(match(descriptors., descriptors_order))]
out_dir <- paste0("output ",Sys.time(), " ", threshold.method)
out_dir <- gsub(":", ".", out_dir)
dir.create(out_dir)
out_dir
# Create empty data.frame -----------------------------
if(descrip==F){
if(calculate.thresh==T){#if you want to calculate autothresholds
if(manual.mask.test==F){
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(surface.,
index.[i]), 1, paste, collapse=".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
lapply(1:length(index.), function(i)
c(apply(expand.grid(surface.,
index.[i]), 1, paste, collapse=".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}else{
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}
}else{#if you don't want to calculate autothresholds, use a threshold vector value,
if(manual.mask.test==F){
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse=".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}else{
if(length(index.)>1){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
do.call(c,
lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(lapply(1:length(index.), function(i)
c(apply(expand.grid(
surface.,
index.[i]), 1, paste, collapse = ".")
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}
}
}
}else{
if(calculate.thresh==T){#if you want to calculate autothresholds
if(manual.mask.test==F){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")}
}else{#if you don't want to calculate autothresholds, use a threshold vector value,
if(manual.mask.test==F){
df_names <-
# c("sample", "vis.file", "nir.file",
c("sample", "img.file",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")
}else{
df_names <-
# c("sample", "vis.file", "nir.file", "real.moss.cover",
c("sample", "img.file", "real.moss.cover",
unlist(
unlist(
lapply(1:length(index.), function(i)
lapply(1:length(surface.), function(j)
c(apply(expand.grid(surface.[j],
index.[i]), 1, paste, collapse="."),
apply(expand.grid(surface.[j],
descriptors.,
index.[i]), 1, paste, collapse=".")
)
)
)
)
),
apply(expand.grid("threshold.value",
index.), 1, paste, collapse="."),
"threshold.method")}
}
}
df <- data.frame(matrix(ncol = length(df_names), nrow = 0))
colnames(df) <- df_names
# set df col class
col_class <-
c(rep("character", 3), rep("numeric", length(df_names) - 4),"character")
for (i in c(1:length(col_class))) {
class(df[, i]) <- col_class[i]
}
rm(col_class)
# Create results csv-----------------------------------------------------
if(calculate.thresh == TRUE){
summary_file <- paste0(out_dir,  paste0("/",threshold.method,"_","summary_data.csv"))
if(!file.exists(summary_file)){write.csv(df, summary_file, row.names = F)}
} else{
summary_file <- paste0(out_dir,  paste0("/summary_data.csv"))
if(!file.exists(summary_file)){write.csv(df, summary_file, row.names = F)}
}
# vis_files <- list.files(path = "./vis")
img_files <- list.files(path = "./JPG")
# nir_files <- list.files(path = "./nir")
if(manual.mask.test==T){
mask_files <- list.files(path = "./mask", pattern = ".tif$")}
# Check if a matching error exists between lists --------------------------
# if (length(vis_files) != length(nir_files)) {
#   stop("Different number of VIS and NIR photos")
# }
# Samples per picture
# indetermined obs areas for picture
total_samples <- length(obs.areas)
# Set sample names #############################################################################
# extract cell names
# cell_names <-
#       gsub(".*/", "",
#            list.files(path = "./rois",pattern=".roi$",full.names = F, recursive = T))
cell_names <-
gsub(".*/", "",
list.files(path = "./rois",pattern=".tif$",full.names = F, recursive = T))
# we have the .roi files in picture named folders in the "rois" directory
samples.per.pic <-
unlist(
lapply(1:(length(list.dirs("rois"))-1),
function(i) length(list.files(list.dirs("rois")[i+1]))))
all_named       <-
data.frame(photo = unlist(lapply(1:length(img_files),
function(i) rep(img_files[i], each=samples.per.pic[i]))),
cell = cell_names)
if (file.exists("names.csv")) {
sample_names <- c(as.character(read.csv("names.csv")[, 1]))
if (length(sample_names) != total_samples) {
stop("File of sample names contains less/more names than samples")
}
all_named$sample <- sample_names
} else{
all_named$sample <- c(names = paste0("obs_", 1:(total_samples)))
}
print(all_named)
all <-
data.frame(Var1 = 1:length(all_named[,1]), Var2 = 1:length(obs.areas)) %>%
dplyr::arrange(Var1)
print(all)
start_time <- Sys.time()
message(paste("Starting calculations at", start_time))
apply(all, 1, function(pair) {
calcs(
pair[1],
pair[1],
obs.areas = obs.areas,
img.files = all_named[,1],
# nir.files = all_named[,1],
chart=chart,
mask.files = mask_files,
manual.mask.test = manual.mask.test,
summary.file = summary_file,
total.samples = total_samples,
index.= index.,
descriptors.= descriptors.,
calculate.thresh = calculate.thresh,
descrip = descrip,
threshold.method = threshold.method,
threshold.vector = threshold.vector,
pdf = pdf,
start.time=start_time
)
})
# CALCS function, for ccspectral
img.files = all_named[,1]
# nir.files = all_named[,1]
manual.mask.test = manual.mask.test
mask.files = mask_files
summary.file = summary_file
total.samples = total_samples
index.= index.
descriptors.= descriptors.
calculate.thresh = calculate.thresh
threshold.method = threshold.method
area <- 1
photo <- 1
# Prepare data
obs_area   <- obs.areas[[area]]
img_photo  <- img.files[photo]
# nir_photo  <- nir.files[photo]
if (manual.mask.test == T) {
mask_photo <- mask.files[photo]
}
done_samples <-
nrow(data.table::fread(summary.file, select = 1L, header = T))
if (file.exists("names.csv")) {
sample_names <- c(as.character(read.csv("names.csv")[, 1]))
if (length(sample_names) != total.samples)
{
stop ("File of sample names contains less/more names than samples")
}
} else{
sample_names <- c(names = paste0("obs_", 1:(total.samples)))
}
sample_name <- sample_names[photo]
print(paste("img picture name: ", as.character(img_photo)))
# print(paste("nir picture name: ", as.character(nir_photo)))
# print(paste("Roi to sample correspondance:", paste0(cell_names[area], " = ", sample_name)))
if (manual.mask.test == T) {
print(paste("Baseline file", mask_photo))
}
if (manual.mask.test == T) {
all_bands <-
raster.jpg.ccspectral(
img.photo = img_photo,
# nir.photo = nir_photo,
manual.mask.test = manual.mask.test,
mask.photo = mask_photo
)
} else{
all_bands <-
raster.jpg.ccspectral(
img.photo = img_photo,
# nir.photo = nir_photo,
manual.mask.test = manual.mask.test)
}
readRDS("D:/Users/Usuario/Documents/GitHub/CIDE/data/output 2023-04-13 14.49.52 manual/raster_results/raster_NDVI_manual_0.4_obs_1.RDs")
r <-
readRDS("D:/Users/Usuario/Documents/GitHub/CIDE/data/output 2023-04-13 14.49.52 manual/raster_results/raster_NDVI_manual_0.4_obs_1.RDs")
r
plot(r)
sample.soil.points <-
function(pic.path,
samp.width = 0.01,
pic.format,
roi.area,
sample.points) {
chartf <- function(pic.path,
samp.width,
pic.format,
roi.area,
sample.points) {
if (require(jpeg) == F) {
install.packages("jpeg")
library(jpeg)
}
if (require(raster) == F) {
install.packages("raster")
library(raster)
}
if (pic.format == "jpg") {
file <- pic.path
# list.files(path = pic.path ,
#            pattern = ".jpg$|.JPG$|.jpeg$",
#            full.names = T)[1]
pic <- jpeg::readJPEG(file)
}
if (pic.format == "tif") {
file <- pic.path
# file <- list.files(path = pic.path,
#                    pattern = ".tif$",
#                    full.names = T)[1]
pic <- tiff::readTIFF(file)
}
pic.1 <- raster::raster(pic[, , 1])
pic.2 <- raster::raster(pic[, , 2])
pic.3 <- raster::raster(pic[, , 3])
pic.raster <- raster::stack(pic.1,
pic.2,
pic.3)
obs.raster <-
crop_mask(ras = all.bands, msk = obs.area)
extent(obs.raster) <- extent(c(0, 1, 0, 1))
options(warn = -1)
op <-
par(
mfrow = c(1, 1),
mar = c(0, 0, 0, 0),
oma = c(0, 0, 0, 0)
)
on.exit(par(op))
X11()
raster::plotRGB(obs.raster,
scale = 1,
asp = nrow(pic.1) / ncol(pic.1))
options(warn = 0)
# chart.coords <- data.frame(x = numeric(), y = numeric())
message("select soil points")
# for (i in 1:24) {
#   options(warn = -1)
#   chart.coords[i, 1:2] <- click(xy = T)[1:2]
#   options(warn = 0)
# }
chart.coords <- locator(n = sample.points, type = "p")
chart.coords <- cbind(chart.coords[[1]], chart.coords[[2]])
colnames(chart.coords) <- c("x", "y")
sp.chart <- sp::SpatialPoints(chart.coords)
chart_buff <-
rgeos::gBuffer(sp.chart, width = samp.width, byid = T)
# plot(chart_buff, add = T, col = "green")
return(chart_buff)
}
sample_soil_points <- chartf(
pic.path = pic.path,
samp.width = samp.width,
pic.format = pic.format,
roi.area,
sample.points
)
plot(sample_soil_points, add = T, col = "green")
return(sample_soil_points)
}
list_raster_results[[1]]
